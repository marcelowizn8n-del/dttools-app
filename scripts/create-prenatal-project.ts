import { db } from '../server/db';
import { eq } from 'drizzle-orm';
import { 
  projects, 
  empathyMaps, 
  personas, 
  observations,
  povStatements, 
  hmwQuestions, 
  ideas, 
  prototypes, 
  testPlans 
} from '../shared/schema';

async function createPrenatalProject() {
  try {
    console.log('üè• Criando projeto de Pr√©-Natal UBS...');

    // 1. Get admin user
    const adminUser = await db.query.users.findFirst({
      where: (users, { eq }) => eq(users.email, 'dttools.app@gmail.com')
    });

    if (!adminUser) {
      throw new Error('Admin user not found!');
    }

    console.log('‚úÖ Admin user found:', adminUser.email);

    // 2. Create Project
    const [project] = await db.insert(projects).values({
      userId: adminUser.id,
      name: 'Acesso ao Pr√©-Natal na UBS - Zona Leste SP',
      description: 'Projeto de Design Thinking focado em melhorar a experi√™ncia de gestantes ao agendar e realizar consultas de pr√©-natal na UBS da Zona Leste de S√£o Paulo. Baseado na jornada real de Manuela Oliveira, 26 anos, m√£e de uma menina de 5 anos.',
      status: 'in_progress',
      currentPhase: 1,
      completionRate: 0
    }).returning();

    console.log('‚úÖ Projeto criado:', project.id);

    // 3. FASE 1 - EMPATIZAR

    // 3.1 Mapa de Empatia - Manuela
    const [empathyMap] = await db.insert(empathyMaps).values({
      projectId: project.id,
      title: 'Mapa de Empatia - Manuela Oliveira (Gestante)',
      says: JSON.stringify([
        '"Preciso confirmar minha gravidez na UBS"',
        '"N√£o consigo ligar, a linha sempre d√° ocupado"',
        '"Preciso come√ßar o pr√©-natal logo"',
        '"A √Çngela me ajudou muito com o agendamento"',
        '"Espero que tudo corra bem com o beb√™"'
      ]),
      thinks: JSON.stringify([
        'Estou preocupada com a sa√∫de do beb√™',
        'Preciso me organizar melhor com o trabalho e a Gabriela',
        'N√£o sei se minhas vacinas est√£o em dia',
        'Como vou conseguir tempo para todas as consultas?',
        'Preciso preparar o quarto do beb√™'
      ]),
      does: JSON.stringify([
        'Trabalha em loja de departamentos no shopping',
        'Cuida da filha Gabriela (5 anos)',
        'Tenta ligar para UBS v√°rias vezes',
        'Recebe visita da ACS em casa',
        'Vai at√© a UBS para consulta'
      ]),
      feels: JSON.stringify([
        'Ansiosa pela confirma√ß√£o da gravidez',
        'Aliviada quando a ACS a ajuda',
        'Acolhida pela recepcionista Daniela',
        'Confiante com orienta√ß√µes da enfermeira Adriana',
        'Esperan√ßosa com a chegada do beb√™'
      ])
    }).returning();

    console.log('‚úÖ Mapa de Empatia criado');

    // 3.2 Persona - Manuela
    const [persona] = await db.insert(personas).values({
      projectId: project.id,
      name: 'Manuela Oliveira',
      age: 26,
      occupation: 'Vendedora em Loja de Departamentos',
      bio: 'Manuela tem 26 anos e mora na Zona Leste de S√£o Paulo. Trabalha em uma loja de departamentos em shopping center e √© m√£e de Gabriela, de 5 anos. Descobriu recentemente que est√° gr√°vida novamente e precisa acessar o pr√©-natal na UBS de seu bairro. √â uma mulher trabalhadora, dedicada √† fam√≠lia e que busca o melhor para seus filhos.',
      goals: JSON.stringify([
        'Confirmar gravidez e iniciar pr√©-natal o quanto antes',
        'Garantir sa√∫de do beb√™ e gravidez tranquila',
        'Atualizar vacinas e seguir orienta√ß√µes m√©dicas',
        'Conciliar trabalho, cuidados com Gabriela e consultas',
        'Preparar a chegada do novo beb√™'
      ]),
      frustrations: JSON.stringify([
        'Dificuldade para agendar consulta na UBS (telefone sempre ocupado)',
        'Falta de tempo entre trabalho e cuidados com a filha',
        'N√£o saber se est√° tudo bem com a gravidez',
        'Informa√ß√µes confusas sobre documentos necess√°rios',
        'Medo de perder vaga no pr√©-natal'
      ]),
      motivations: JSON.stringify([
        'Sa√∫de e bem-estar do beb√™',
        'Ser uma boa m√£e para Gabriela e o novo filho',
        'Apoio da ACS √Çngela que a orienta',
        'Atendimento humanizado da equipe da UBS',
        'Sonho de ter uma fam√≠lia saud√°vel'
      ]),
      techSavviness: 'medium'
    }).returning();

    console.log('‚úÖ Persona Manuela criada');

    // 3.3 Observa√ß√£o de Campo - UBS
    const [observation] = await db.insert(observations).values({
      projectId: project.id,
      location: 'UBS Zona Leste - S√£o Paulo',
      context: 'Dia de consulta de pr√©-natal. Observa√ß√£o da chegada de Manuela, recep√ß√£o, triagem e consulta com enfermeira.',
      behavior: 'Manuela chega pontualmente, se apresenta na recep√ß√£o com timidez mas √© recebida com carinho pela Daniela. Aguarda pacientemente na sala de espera. Durante triagem com auxiliar de enfermagem, demonstra ansiedade ao medir press√£o. Na consulta com enfermeira Adriana, faz muitas perguntas sobre cuidados, vacinas e complementos. Sai da UBS mais tranquila e confiante.',
      insights: 'O acolhimento humanizado da equipe (Daniela, auxiliar, Adriana) √© fundamental para tranquilizar a gestante. A ACS √Çngela tem papel crucial na ponte entre comunidade e UBS. Gestantes de primeira viagem ou com filhos pequenos precisam de orienta√ß√µes claras e suporte para agendamento.',
      date: new Date('2025-10-08')
    }).returning();

    console.log('‚úÖ Observa√ß√£o de Campo criada');

    // 4. FASE 2 - DEFINIR

    // 4.1 POV Statement
    const [pov] = await db.insert(povStatements).values({
      projectId: project.id,
      user: 'Gestante trabalhadora da Zona Leste de S√£o Paulo, m√£e de uma crian√ßa pequena',
      need: 'Agendar consulta de pr√©-natal de forma r√°pida e sem burocracia, conciliando com trabalho e cuidados com a filha',
      insight: 'O telefone da UBS raramente atende, mas o apoio presencial da Agente Comunit√°ria de Sa√∫de resolve o problema de forma humanizada',
      statement: 'Gestantes trabalhadoras da Zona Leste precisam de um sistema de agendamento acess√≠vel e apoio da ACS porque o telefone da UBS √© insuficiente e elas t√™m pouco tempo dispon√≠vel entre trabalho e fam√≠lia.',
      priority: 'high'
    }).returning();

    console.log('‚úÖ POV Statement criado');

    // 4.2 How Might We
    const [hmw1] = await db.insert(hmwQuestions).values({
      projectId: project.id,
      question: 'Como podemos facilitar o agendamento de consultas de pr√©-natal sem depender apenas do telefone?',
      context: 'Gestantes como Manuela enfrentam dificuldade para agendar pois o telefone da UBS sempre d√° ocupado',
      challenge: 'Sistema de agendamento atual inadequado para demanda',
      scope: 'service',
      priority: 'high',
      category: 'Acesso',
      votes: 8
    }).returning();

    const [hmw2] = await db.insert(hmwQuestions).values({
      projectId: project.id,
      question: 'Como podemos ampliar o papel das ACS no suporte √†s gestantes?',
      context: 'A ACS √Çngela foi fundamental para ajudar Manuela a conseguir a consulta',
      challenge: 'Potencializar papel das agentes comunit√°rias como ponte entre comunidade e UBS',
      scope: 'service',
      priority: 'high',
      category: 'Suporte',
      votes: 6
    }).returning();

    const [hmw3] = await db.insert(hmwQuestions).values({
      projectId: project.id,
      question: 'Como podemos tornar a jornada do pr√©-natal mais clara e orientada para gestantes de primeira viagem?',
      context: 'Manuela tinha d√∫vidas sobre vacinas, documentos e etapas do pr√©-natal',
      challenge: 'Falta de informa√ß√£o estruturada sobre processo completo do pr√©-natal',
      scope: 'experience',
      priority: 'medium',
      category: 'Informa√ß√£o',
      votes: 5
    }).returning();

    console.log('‚úÖ How Might We criados (3)');

    // 5. FASE 3 - IDEAR

    // 5.1 Ideia 1 - App de Agendamento
    const [idea1] = await db.insert(ideas).values({
      projectId: project.id,
      title: 'App/WhatsApp de Agendamento UBS',
      description: 'Aplicativo ou chatbot no WhatsApp para agendamento de consultas de pr√©-natal. Gestante escolhe data/hora dispon√≠vel, recebe confirma√ß√£o autom√°tica e lembretes. Integrado com sistema da UBS.',
      category: 'Digital',
      desirability: 5, // Gestantes adorariam agendar pelo celular
      viability: 4, // Vi√°vel com WhatsApp Business API
      feasibility: 3, // Precisa integra√ß√£o com sistema da UBS
      confidenceLevel: 4,
      dvfScore: 4.0,
      dvfAnalysis: 'Alta desejabilidade pois resolve dor principal (telefone ocupado). Vi√°vel via WhatsApp Business. Desafio t√©cnico √© integra√ß√£o com prontu√°rio eletr√¥nico da UBS.',
      actionDecision: 'love_it',
      priorityRank: 1,
      votes: 12
    }).returning();

    // 5.2 Ideia 2 - Capacita√ß√£o ACS
    const [idea2] = await db.insert(ideas).values({
      projectId: project.id,
      title: 'Capacita√ß√£o e Equipamento para ACS',
      description: 'Treinar e equipar Agentes Comunit√°rias de Sa√∫de com tablets/celulares para agendamento durante visitas domiciliares. ACS vira ponte digital entre gestante e UBS.',
      category: 'Capacita√ß√£o',
      desirability: 4, // Gestantes confiam nas ACS
      viability: 4, // Governo j√° investe em ACS
      feasibility: 4, // Treinamento + equipamento vi√°vel
      confidenceLevel: 4,
      dvfScore: 4.0,
      dvfAnalysis: 'Desej√°vel pois ACS j√° tem rela√ß√£o de confian√ßa. Vi√°vel com investimento em capacita√ß√£o. Execut√°vel com tablets e sistema simplificado.',
      actionDecision: 'love_it',
      priorityRank: 2,
      votes: 10
    }).returning();

    // 5.3 Ideia 3 - Guia do Pr√©-Natal
    const [idea3] = await db.insert(ideas).values({
      projectId: project.id,
      title: 'Guia Digital do Pr√©-Natal',
      description: 'Plataforma/app com checklist completo do pr√©-natal: documentos necess√°rios, vacinas, exames, complementos, consultas. Notifica√ß√µes personalizadas por semana de gesta√ß√£o.',
      category: 'Informa√ß√£o',
      desirability: 5, // Gestantes precisam de orienta√ß√£o clara
      viability: 5, // Baixo custo para criar conte√∫do digital
      feasibility: 5, // Tecnicamente simples (PWA)
      confidenceLevel: 5,
      dvfScore: 5.0,
      dvfAnalysis: 'Alt√≠ssimo DVF. Desej√°vel (reduz ansiedade), vi√°vel (conte√∫do j√° existe), execut√°vel (PWA simples). Quick win!',
      actionDecision: 'love_it',
      priorityRank: 3,
      votes: 9
    }).returning();

    console.log('‚úÖ Ideias criadas (3)');

    // 6. FASE 4 - PROTOTIPAR

    // 6.1 Prot√≥tipo - WhatsApp Bot
    const [prototype1] = await db.insert(prototypes).values({
      projectId: project.id,
      ideaId: idea1.id,
      name: 'Prot√≥tipo WhatsApp Bot - Agendamento Pr√©-Natal',
      type: 'digital',
      description: 'Fluxo de conversa√ß√£o no WhatsApp para agendamento de pr√©-natal. Bot cumprimenta gestante, solicita dados b√°sicos (nome, SUS, semanas de gesta√ß√£o), mostra hor√°rios dispon√≠veis, confirma agendamento e envia lembrete 1 dia antes.',
      materials: JSON.stringify([
        'WhatsApp Business API',
        'Plataforma de chatbot (Twilio/DialogFlow)',
        'Integra√ß√£o com agenda da UBS',
        'Base de dados de gestantes'
      ]),
      images: JSON.stringify([]),
      version: 1,
      feedback: 'Gestantes acharam muito mais f√°cil que ligar. Solicitaram tamb√©m op√ß√£o de reagendar pelo bot.'
    }).returning();

    // 6.2 Prot√≥tipo - Tablet ACS
    const [prototype2] = await db.insert(prototypes).values({
      projectId: project.id,
      ideaId: idea2.id,
      name: 'Prot√≥tipo Interface Tablet ACS',
      type: 'digital',
      description: 'Interface simplificada em tablet para ACS agendar consultas durante visita domiciliar. Tela com calend√°rio visual, cadastro r√°pido de gestante, confirma√ß√£o instant√¢nea e impress√£o de comprovante.',
      materials: JSON.stringify([
        'Tablet Android',
        'App offline-first (sincroniza depois)',
        'Impressora t√©rmica port√°til',
        'Manual de treinamento para ACS'
      ]),
      images: JSON.stringify([]),
      version: 1,
      feedback: 'ACS √Çngela testou e aprovou. Sugeriu adicionar campo para anotar observa√ß√µes da visita.'
    }).returning();

    console.log('‚úÖ Prot√≥tipos criados (2)');

    // 7. FASE 5 - TESTAR

    // 7.1 Plano de Teste - WhatsApp Bot
    const [testPlan] = await db.insert(testPlans).values({
      projectId: project.id,
      prototypeId: prototype1.id,
      name: 'Teste de Usabilidade - WhatsApp Bot Agendamento',
      objective: 'Validar se gestantes conseguem agendar consulta de pr√©-natal de forma aut√¥noma pelo WhatsApp, medindo taxa de sucesso, tempo de conclus√£o e satisfa√ß√£o.',
      methodology: 'Teste de usabilidade moderado com 10 gestantes da Zona Leste. Cen√°rio: "Voc√™ descobriu que est√° gr√°vida e precisa agendar primeira consulta de pr√©-natal. Use o WhatsApp da UBS."',
      participants: 10,
      duration: 15,
      tasks: JSON.stringify([
        'Iniciar conversa com bot da UBS',
        'Informar dados pessoais (nome, CPF, SUS)',
        'Escolher data e hor√°rio dispon√≠vel',
        'Confirmar agendamento',
        'Verificar se recebeu confirma√ß√£o'
      ]),
      metrics: JSON.stringify([
        'Taxa de conclus√£o (meta: >90%)',
        'Tempo m√©dio de agendamento (meta: <3 min)',
        'Satisfa√ß√£o (NPS meta: >8)',
        'N√∫mero de erros/d√∫vidas',
        'Taxa de abandono'
      ]),
      status: 'completed'
    }).returning();

    console.log('‚úÖ Plano de Teste criado');

    // Update project completion
    await db.update(projects)
      .set({ 
        currentPhase: 5, 
        completionRate: 100,
        status: 'completed'
      })
      .where(eq(projects.id, project.id));

    console.log('‚úÖ Projeto atualizado - 100% completo!');

    console.log('\nüéâ PROJETO CRIADO COM SUCESSO!');
    console.log('\nüìä Resumo:');
    console.log('- Projeto:', project.name);
    console.log('- ID:', project.id);
    console.log('- Fase 1 (Empatizar): 1 mapa de empatia, 1 persona, 1 observa√ß√£o');
    console.log('- Fase 2 (Definir): 1 POV statement, 3 HMW questions');
    console.log('- Fase 3 (Idear): 3 ideias com an√°lise DVF');
    console.log('- Fase 4 (Prototipar): 2 prot√≥tipos digitais');
    console.log('- Fase 5 (Testar): 1 plano de teste completo');
    console.log('\n‚úÖ Projeto 100% completo e pronto para visualiza√ß√£o no admin!');

  } catch (error) {
    console.error('‚ùå Erro ao criar projeto:', error);
    throw error;
  }
}

// Execute
createPrenatalProject()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
